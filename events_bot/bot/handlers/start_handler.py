from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from events_bot.database.services import UserService, CityService, CategoryService
from events_bot.bot.states import UserStates
from events_bot.bot.keyboards import get_city_keyboard, get_main_keyboard
import os
import random
import logfire
import time

router = Router()

# –ü–æ–ª—É—á–∞–µ–º file_id –≥–∏—Ñ–æ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
MAIN_MENU_GIF_IDS = [
    os.getenv("MAIN_MENU_GIF_ID_1"),
    os.getenv("MAIN_MENU_GIF_ID_2"),
    os.getenv("MAIN_MENU_GIF_ID_3"),
    os.getenv("MAIN_MENU_GIF_ID_4"),
    os.getenv("MAIN_MENU_GIF_ID_5"),
    os.getenv("MAIN_MENU_GIF_ID_6"),
]

# –ì–∏—Ñ–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
START_GIF_ID = os.getenv("START_GIF_ID")

# –û—á–∏—Å—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º None
MAIN_MENU_GIF_IDS = [gif_id for gif_id in MAIN_MENU_GIF_IDS if gif_id]

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥–∞–±–ª–∫–ª–∏–∫–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
ANTI_DOUBLE_CLICK_DELAY = 2.0


def register_start_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã start"""
    dp.include_router(router)


@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    current_time = time.time()

    # --- –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–∞–±–ª–∫–ª–∏–∫–∞ ---
    state_data = await state.get_data()
    last_start_time = state_data.get(f"last_start_time_{user_id}")

    if last_start_time and (current_time - last_start_time) < ANTI_DOUBLE_CLICK_DELAY:
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ ANTI_DOUBLE_CLICK_DELAY —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ /start –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logfire.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–±–ª–∫–ª–∏–∫ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —á–∞—Å—Ç–æ –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
            # await message.answer("‚è≥ –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            pass
        except:
            pass
        return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–æ—Ç –≤—ã–∑–æ–≤

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ /start
    await state.update_data({f"last_start_time_{user_id}": current_time})
    # -- –ö–æ–Ω–µ—Ü –∑–∞—â–∏—Ç—ã --

    # 1. –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        await message.delete()
    except Exception:
        pass

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —á–∞—Ç–µ
    welcome_msg = await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–µ—Ä–¥—Ü–µ!")

    # 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await UserService.register_user(
        db=db,
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )

    # 4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    user_cities = await UserService.get_user_cities(db, message.from_user.id)
    user_categories = await UserService.get_user_categories(db, message.from_user.id)
    if user_cities and user_categories:
        await show_main_menu(message)
        return

    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ (—ç—Ç–æ –±—É–¥–µ—Ç –Ω–æ–≤–æ–µ, –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    if START_GIF_ID:
        try:
            sent_message = await message.answer_animation(
                animation=START_GIF_ID
            )
            await show_city_selection(sent_message, state, db, user_id=message.from_user.id, welcome_msg_id=welcome_msg.message_id)
            return
        except Exception as e:
            logfire.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ START_GIF: {e}")

    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –≥–∏—Ñ–∫–∏
    await show_city_selection(message, state, db, user_id=message.from_user.id, is_text_based=True, welcome_msg_id=welcome_msg.message_id)


async def show_city_selection(message: Message, state: FSMContext, db, user_id: int, is_text_based: bool = False, welcome_msg_id: int = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏—Ñ–∫–æ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–≤–æ–µ"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ)
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    if welcome_msg_id:
        await state.update_data(welcome_msg_id=welcome_msg_id)

    all_cities = await CityService.get_all_cities(db)
    user_cities = await UserService.get_user_cities(db, user_id)
    selected_ids = [c.id for c in user_cities]

    # --- –¢–µ–∫—Å—Ç –ë–ï–ó –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ---
    text = (
        "–ù–∞—á–Ω–µ–º!\n\n"
        "üéì –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã:"
    )
    # -------------------------
    keyboard = get_city_keyboard(all_cities, selected_ids)
    
    if is_text_based:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≥–∏—Ñ–∫–µ
        await message.edit_caption(caption=text, reply_markup=keyboard, parse_mode="HTML")
    
    await state.set_state(UserStates.waiting_for_city)


async def show_main_menu(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≥–∏—Ñ–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    if MAIN_MENU_GIF_IDS:
        selected_gif = random.choice(MAIN_MENU_GIF_IDS)
        try:
            await message.answer_animation(
                animation=selected_gif,
                caption="",
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )
            return
        except Exception as e:
            logfire.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∏—Ñ–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


@router.message(F.text.in_(["/menu", "/main_menu"]))
async def cmd_main_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await show_main_menu(message)


@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª"""
    try:
        await callback.message.delete()
    except Exception:
        pass
    await show_main_menu(callback.message)
    await callback.answer()
