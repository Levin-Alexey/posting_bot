from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from events_bot.database.services import UserService, CategoryService
from events_bot.bot.states import UserStates
from events_bot.bot.keyboards import get_city_keyboard, get_category_selection_keyboard
import logfire

router = Router()

def register_start_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
    dp.include_router(router)

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await UserService.register_user(
        db=db,
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    user_cities = await UserService.get_user_cities(db, message.from_user.id)
    
    if user_cities:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = await CategoryService.get_all_categories(db)
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–µ—Ä–¥—Ü–µ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞!
"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
            reply_markup=get_category_selection_keyboard(categories),
        )
        await state.set_state(UserStates.waiting_for_categories)
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–µ—Ä–¥—Ü–µ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞!
"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
            reply_markup=get_city_keyboard(for_user=True)
        )
        await state.set_state(UserStates.waiting_for_cities)

@router.callback_query(F.data.startswith("user_city_"))
async def process_user_city_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    city = callback.data[10:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "user_city_"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    data = await state.get_data()
    selected_cities = data.get("selected_cities", [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    if city in selected_cities:
        selected_cities.remove(city)
    else:
        selected_cities.append(city)
        
    await state.update_data(selected_cities=selected_cities)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=get_city_keyboard(for_user=True, selected_cities=selected_cities)
    )
    
    await callback.answer()

@router.callback_query(F.data == "user_city_select_all")
async def select_all_user_cities(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cities = [
        "–£—Ä–§–£", "–£–ì–ú–£", "–£—Ä–ì–≠–£", "–£—Ä–ì–ü–£",
        "–£—Ä–ì–Æ–£", "–£–ì–ì–£", "–£—Ä–ì–£–ü–°", "–£—Ä–ì–ê–•–£",
        "–£—Ä–ì–ê–£", "–†–ì–ü–ü–£", "–†–ê–ù–•–∏–ì–°"
    ]
    
    await state.update_data(selected_cities=cities)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=get_city_keyboard(for_user=True, selected_cities=cities)
    )
    
    await callback.answer()

@router.callback_query(F.data == "user_city_confirm")
async def confirm_user_cities(callback: CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    selected_cities = data.get("selected_cities", [])
    
    if not selected_cities:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    await UserService.update_user_cities(db, callback.from_user.id, selected_cities)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = await CategoryService.get_all_categories(db)
    try:
        await callback.message.delete()
        await callback.message.answer(
            f"üìç –ì–æ—Ä–æ–¥–∞ {', '.join(selected_cities)} –≤—ã–±—Ä–∞–Ω—ã!
"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
            reply_markup=get_category_selection_keyboard(categories),
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    await state.set_state(UserStates.waiting_for_categories)
    await callback.answer()
