from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from events_bot.database.services import UserService
from events_bot.bot.states import UserStates
from events_bot.bot.keyboards import get_city_keyboard, get_main_keyboard
import os
import random
import logfire

router = Router()

# –ü–æ–ª—É—á–∞–µ–º file_id –≥–∏—Ñ–æ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
MAIN_MENU_GIF_IDS = [
    os.getenv("MAIN_MENU_GIF_ID_1"),
    os.getenv("MAIN_MENU_GIF_ID_2"),
    os.getenv("MAIN_MENU_GIF_ID_3"),
    os.getenv("MAIN_MENU_GIF_ID_4"),
    os.getenv("MAIN_MENU_GIF_ID_5"),
    os.getenv("MAIN_MENU_GIF_ID_6"),
]

# –ì–∏—Ñ–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
START_GIF_ID = os.getenv("START_GIF_ID")

# –û—á–∏—Å—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º None
MAIN_MENU_GIF_IDS = [gif_id for gif_id in MAIN_MENU_GIF_IDS if gif_id]


def register_start_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã start"""
    dp.include_router(router)


@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext, db):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    try:
        await message.delete()
    except Exception:
        pass

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await UserService.register_user(
        db=db,
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )

    # –ï—Å–ª–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user.city and await UserService.get_user_categories(db, message.from_user.id):
        await show_main_menu(message)
        return

    # –û–±–Ω—É–ª—è–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–ü—Ä–∏–≤–µ—Ç!", reply_markup=ReplyKeyboardRemove())

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Ä–æ–¥–∞
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Ç–≤–æ–µ–≥–æ –≤—É–∑–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.\n\n"
        "–ê –µ—â–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –ù–∞—á–Ω–µ–º!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=get_city_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_for_city)


async def show_city_selection(message: Message, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏—Ñ–∫–æ–π"""
    try:
        await message.edit_caption(
            caption=(
                "üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Ç–≤–æ–µ–≥–æ –≤—É–∑–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.\n\n"
                "–ê –µ—â–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –ù–∞—á–Ω–µ–º!\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:"
            ),
            reply_markup=get_city_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–∏—Ñ–∫–∏: {e}")


async def show_main_menu(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî —Ç–æ–ª—å–∫–æ –≥–∏—Ñ–∫–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"""
    if MAIN_MENU_GIF_IDS:
        selected_gif = random.choice(MAIN_MENU_GIF_IDS)
        try:
            await message.answer_animation(
                animation=selected_gif,
                # –ù–∏–∫–∞–∫–æ–≥–æ caption ‚Äî —Ç–æ–ª—å–∫–æ –≥–∏—Ñ–∫–∞
                reply_markup=get_main_keyboard()
            )
            return
        except Exception as e:
            logfire.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∏—Ñ–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

    # –†–µ–∑–µ—Ä–≤: –µ—Å–ª–∏ –≥–∏—Ñ–æ–∫ –Ω–µ—Ç ‚Äî —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


@router.message(F.text.in_(["/menu", "/main_menu"]))
async def cmd_main_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await show_main_menu(message)


@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª"""
    await show_main_menu(callback.message)
    await callback.answer()
