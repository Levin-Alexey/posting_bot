from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from typing import Union
import logfire
from sqlalchemy import select
from events_bot.database.services import PostService, UserService, CategoryService
from events_bot.database.models import Category, Post
from events_bot.database.models import Category
from events_bot.bot.states import PostStates
from events_bot.bot.keyboards import (
    get_main_keyboard,
    get_category_selection_keyboard,
    get_city_keyboard,
)
from events_bot.storage import file_storage
from loguru import logger
from datetime import timezone
import re

router = Router()

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
BANNED_WORDS = [
    "—Å–ø–∞–º", "—Ä–µ–∫–ª–∞–º–∞", "–∫–∞–∑–∏–Ω–æ", "–±—É–∫–º–µ–∫–µ—Ä", "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏", "–ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∏",
    "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–µ–Ω—å–≥–∏", "–¥–µ—à–µ–≤–æ", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ", "–≤—ã–∏–≥—Ä—ã—à", "–ª–æ—Ç–µ—Ä–µ—è",
    "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–±–∏—Ç–∫–æ–∏–Ω", "–∫—Ä–µ–¥–∏—Ç", "—Å—Å—É–¥–∞", "—Ä–∞—Å–∫—Ä—É—Ç–∫–∞",
    "–ø—Ä–∞–π—Å", "—Ü–µ–Ω–∞", "—Å–∫–∏–¥–∫–∞", "–∞–∫—Ü–∏—è", "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞", "–æ–ø—Ç–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞",
    "–º–∞—Ç", "—Ö—É–π", "–±–ª—è—Ç—å", "–µ–±–∞—Ç—å", "—Å—É–∫–∞", "–ø–∏–¥–æ—Ä", "–≥–æ–Ω–¥–æ–Ω", "—à–ª—é—Ö–∞"
]

# –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
SPAM_LINK_PATTERNS = [
    r"@[\w]+",           # Telegram —é–∑–µ—Ä–Ω–µ–π–º—ã
    r"t\.me/[\w]+",      # t.me —Å—Å—ã–ª–∫–∏
    r"telegram\.me/[\w]+", 
    r"wa\.me/[\d]+",     # WhatsApp
    r"whatsapp", "viber", "vk\.com", "vkontakte"
]

def contains_banned_words(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"""
    text_lower = text.lower()
    return any(word in text_lower for word in BANNED_WORDS)

def contains_spam_links(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏"""
    text_lower = text.lower()
    return any(re.search(pattern, text_lower) for pattern in SPAM_LINK_PATTERNS)

def is_suspicious_post(title: str, content: str, url: str | None) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª–µ–Ω –ª–∏ –ø–æ—Å—Ç"""
    reasons = []
    full_text = f"{title} {content} {url or ''}"
    
    if contains_banned_words(full_text):
        reasons.append("–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞")
    
    if contains_spam_links(full_text):
        reasons.append("–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
    
    return len(reasons) > 0, ", ".join(reasons) if reasons else ""

async def send_post_to_moderation_with_check(bot, post: Post, db):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —Å –ø–æ–º–µ—Ç–∫–æ–π, –µ—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π"""
    is_suspicious, reason = is_suspicious_post(
        post.title, post.content, getattr(post, "url", None)
    )
    
    moderation_group_id = os.getenv("MODERATION_GROUP_ID")
    if not moderation_group_id:
        logfire.error("MODERATION_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    moderation_text = ModerationService.format_post_for_moderation(post)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É, –µ—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π
    if is_suspicious:
        warning = f"‚ö†Ô∏è <b>–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô –ü–û–°–¢</b>\n"
        warning += f"üîç –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        moderation_text = warning + moderation_text

    moderation_keyboard = get_moderation_keyboard(post.id)
    
    try:
        if post.image_id:
            media_photo = await file_storage.get_media_photo(post.image_id)
            if media_photo:
                await bot.send_photo(
                    chat_id=moderation_group_id,
                    photo=media_photo.media,
                    caption=moderation_text,
                    reply_markup=moderation_keyboard,
                    parse_mode="HTML",
                )
                return
        
        await bot.send_message(
            chat_id=moderation_group_id,
            text=moderation_text,
            reply_markup=moderation_keyboard,
            parse_mode="HTML",
        )
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
        import traceback
        logfire.error(f"–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

def register_post_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ—Å—Ç–æ–≤"""
    dp.include_router(router)

@router.message(F.text == "/create_post")
async def cmd_create_post(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_post"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    await state.set_state(PostStates.creating_post)

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞
    await message.answer(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ—Å—Ç–∞:", reply_markup=get_city_keyboard(for_post=True)
    )
    await state.set_state(PostStates.waiting_for_city_selection)

@router.message(F.text == "/cancel")
async def cmd_cancel_post(message: Message, state: FSMContext, db):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
    await state.clear()
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úñÔ∏è", reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data == "create_post")
async def start_create_post(callback: CallbackQuery, state: FSMContext, db):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    await state.set_state(PostStates.creating_post)

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_city_keyboard(for_post=True)
    )
    await state.set_state(PostStates.waiting_for_city_selection)
    await callback.answer()

@router.callback_query(F.data == "cancel_post")
async def cancel_post_creation(callback: CallbackQuery, state: FSMContext, db):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await state.clear()
    try:
        if callback.message.text:
            await callback.message.edit_text(
                "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úñÔ∏è", reply_markup=get_main_keyboard()
            )
        elif callback.message.caption:
            await callback.message.edit_caption(
                caption="–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úñÔ∏è", reply_markup=get_main_keyboard()
            )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()

@router.callback_query(
    PostStates.waiting_for_city_selection, F.data == "post_city_select_all"
)
async def select_all_cities(callback: CallbackQuery, state: FSMContext, db):
    """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
    logfire.info(f"–ü–æ–ª—É—á–µ–Ω callback post_city_select_all –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    all_cities = [
        "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
    await state.update_data(selected_cities=all_cities)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    city_text = ", ".join(all_cities)
    try:
        await callback.message.edit_text(
            f"üìç –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {city_text}",
            reply_markup=get_city_keyboard(for_post=True, selected_cities=all_cities)
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await callback.answer("–í—Å–µ –≥–æ—Ä–æ–¥–∞ –≤—ã–±—Ä–∞–Ω—ã!")

@router.callback_query(
    PostStates.waiting_for_city_selection, F.data == "post_city_confirm"
)
async def confirm_city_selection(callback: CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞"""
    logfire.info(f"–ü–æ–ª—É—á–µ–Ω callback post_city_confirm –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    data = await state.get_data()
    selected_cities = data.get('selected_cities', [])
    logfire.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {selected_cities}")
    
    if not selected_cities:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    await state.update_data(post_city=", ".join(selected_cities))
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    all_categories = await CategoryService.get_all_categories(db)
    
    city_text = ", ".join(selected_cities)
    try:
        await callback.message.edit_text(
            f"üìç –ì–æ—Ä–æ–¥–∞ –≤—ã–±—Ä–∞–Ω—ã: {city_text}\n\n‚≠êÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=get_category_selection_keyboard(all_categories, for_post=True),
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await state.set_state(PostStates.waiting_for_category_selection)
    await callback.answer()

@router.callback_query(
    PostStates.waiting_for_city_selection, F.data.startswith("post_city_")
)
async def process_post_city_selection(callback: CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
    logfire.info(f"–ü–æ–ª—É—á–µ–Ω callback {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    city = callback.data[10:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "post_city_"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_cities = data.get('selected_cities', [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    if city in selected_cities:
        selected_cities.remove(city)
    else:
        selected_cities.append(city)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    await state.update_data(selected_cities=selected_cities)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    city_text = ", ".join(selected_cities) if selected_cities else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    try:
        await callback.message.edit_text(
            f"üìç –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: {city_text}",
            reply_markup=get_city_keyboard(for_post=True, selected_cities=selected_cities)
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await callback.answer()

@router.callback_query(
    PostStates.waiting_for_category_selection, F.data.startswith("post_category_")
)
async def process_post_category_selection(
    callback: CallbackQuery, state: FSMContext, db
):
    """–ú—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞"""
    category_id = int(callback.data.split("_")[2])  # post_category_123 -> 123
    data = await state.get_data()
    category_ids = data.get("category_ids", [])

    if category_id in category_ids:
        category_ids.remove(category_id)
    else:
        category_ids.append(category_id)
    await state.update_data(category_ids=category_ids)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    all_categories = await CategoryService.get_all_categories(db)
    try:
        await callback.message.edit_text(
            "‚≠êÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=get_category_selection_keyboard(
                all_categories, category_ids, for_post=True
            ),
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await callback.answer()

@router.callback_query(
    PostStates.waiting_for_category_selection, F.data == "confirm_post_categories"
)
@logger.catch
async def confirm_post_categories(callback: CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    category_ids = data.get("category_ids", [])
    if not category_ids:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    stmt = select(Category).where(Category.id.in_(category_ids))
    result = await db.execute(stmt)
    categories = result.scalars().all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if categories:
        category_names = [cat.name for cat in categories]
        category_list = ", ".join(category_names)
    else:
        category_list = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ID –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(category_ids=category_ids)
    logfire.info(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {category_names}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    try:
        await callback.message.edit_text(
            f"‚úèÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: {category_list}\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:"
        )
    except Exception as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await state.set_state(PostStates.waiting_for_title)
    logfire.info(
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_for_title –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}"
    )
    await callback.answer()

@router.message(PostStates.waiting_for_title)
@logger.catch
async def process_post_title(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å—Ç–∞"""
    logfire.info(
        f"–ü–æ–ª—É—á–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}"
    )

    if len(message.text) > 100:
        await message.answer("‚úñÔ∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(title=message.text)
    logfire.info(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {message.text}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(PostStates.waiting_for_content)
    logfire.info(
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_for_content –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
    )

@router.message(PostStates.waiting_for_content)
async def process_post_content(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    if len(message.text) > 2000:
        await message.answer("‚úñÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(content=message.text)
    await message.answer(
        "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç / –∫–∞–Ω–∞–ª / —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://).\n\n–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ –≤–∞—à–µ–º—É –∞–Ω–æ–Ω—Å—É:"
    )
    await state.set_state(PostStates.waiting_for_url)

@router.message(PostStates.waiting_for_url)
async def process_post_url(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞"""
    url = None if message.text == "/skip" else message.text.strip()
    if url and not (url.startswith("http://") or url.startswith("https://")):
        await message.answer(
            "‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip."
        )
        return
    await state.update_data(url=url)
    await message.answer(
        "üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2025 18:30)\n\n"
    )
    await state.set_state(PostStates.waiting_for_event_datetime)

@router.message(PostStates.waiting_for_event_datetime)
async def process_event_datetime(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    from datetime import datetime, timezone, timedelta

    try:
        from zoneinfo import ZoneInfo
    except Exception:
        ZoneInfo = None
    text = message.text.strip()
    for fmt in ("%d.%m.%Y %H:%M", "%d.%m.%Y %H.%M"):
        try:
            event_dt = datetime.strptime(text, fmt)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤ –ú–°–ö)
            if ZoneInfo is not None:
                msk = ZoneInfo("Europe/Moscow")
                current_msk = datetime.now(msk).replace(tzinfo=None)
            else:
                # Fallback: –ø–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ UTC
                current_utc = datetime.now(timezone.utc)
                current_msk = current_utc.replace(tzinfo=None) + timedelta(hours=3)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –≤—Ä–µ–º–µ–Ω–∏ (–º–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç –≤ –±—É–¥—É—â–µ–º)
            min_future_time = current_msk + timedelta(minutes=30)

            if event_dt <= min_future_time:
                await message.answer(
                    "‚úñÔ∏è –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω–µ–µ, —á–µ–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!\n"
                    f"–°–µ–π—á–∞—Å: {current_msk.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n"
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_future_time.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º."
                )
                return

            # –í—Ä–µ–º—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ú–°–ö (–∫–∞–∫ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ISO (—Å —Ç–∞–π–º–∑–æ–Ω–æ–π +00:00)
            await state.update_data(event_at=event_dt.isoformat())
            await message.answer(
                "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"
            )
            await state.set_state(PostStates.waiting_for_address)
            return
        except ValueError:
            continue
    await message.answer(
        "‚úñÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 25.12.2025 18:30. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    )

@router.message(PostStates.waiting_for_address)
async def process_post_address(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    address = message.text.strip()
    if len(address) > 200:
        await message.answer("‚úñÔ∏è –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(address=address)
    await message.answer(
        "üéÜ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    await state.set_state(PostStates.waiting_for_image)

@router.message(F.text.startswith("/delete_post "))
async def delete_post_handler(message: Message, db):
    try:
        post_id = int(message.text.split()[1])
        success = await PostService.delete_post(db, post_id)
        
        if success:
            await message.answer(f"‚úÖ –ü–æ—Å—Ç {post_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
        else:
            await message.answer(f"‚ùå –ü–æ—Å—Ç {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except (IndexError, ValueError):
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ—Å—Ç–∞. –ü—Ä–∏–º–µ—Ä: /delete_post 45")
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")

@router.message(PostStates.waiting_for_image)
async def process_post_image(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    if message.text == "/skip":
        await continue_post_creation(message, state, db)
        return

    if not message.photo:
        await message.answer("‚úñÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = message.photo[-1]

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_info = await message.bot.get_file(photo.file_id)
    file_data = await message.bot.download_file(file_info.file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_id = await file_storage.save_file(file_data.read(), "jpg")

    await state.update_data(image_id=file_id)
    await continue_post_creation(message, state, db)

@router.callback_query(PostStates.waiting_for_image, F.data == "skip_image")
async def skip_image_callback(callback: CallbackQuery, state: FSMContext, db):
    await continue_post_creation(callback, state, db)

async def continue_post_creation(
    callback_or_message: Union[Message, CallbackQuery], state: FSMContext, db
):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    user_id = callback_or_message.from_user.id
    message = (
        callback_or_message
        if isinstance(callback_or_message, Message)
        else callback_or_message.message
    )
    data = await state.get_data()
    title = data.get("title")
    content = data.get("content")
    category_ids = data.get("category_ids", [])
    post_city = data.get("post_city")
    image_id = data.get("image_id")
    event_at_iso = data.get("event_at")
    url = data.get("url")
    address = data.get("address")  # ‚úÖ –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä

    if not all([title, content, category_ids, post_city]):
        await message.answer(
            "‚úñÔ∏è –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard(),
        )
        await state.clear()
        return

    # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ø–æ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    parsed_event_at = None
    if event_at_iso:
        try:
            from zoneinfo import ZoneInfo
            parsed_event_at = datetime.fromisoformat(event_at_iso)
            if parsed_event_at.tzinfo is not None:
                parsed_event_at = parsed_event_at.astimezone(timezone.utc).replace(tzinfo=None)
        except Exception:
            pass

    post = await PostRepository.create_post(
        db, title, content, user_id, category_ids, post_city, image_id, parsed_event_at, url, address
    )

    if post and message.bot:
        await send_post_to_moderation_with_check(message.bot, post, db)
        await message.answer(
            f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –°–µ—Ä–¥—Ü–µ –∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ üëèü•≥",
            reply_markup=get_main_keyboard(),
        )
    else:
        await message.answer(
            "‚úñÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard(),
        )

    await state.clear()
