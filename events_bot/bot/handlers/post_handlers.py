from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from events_bot.database.services import PostService, UserService
from events_bot.bot.states import PostStates
from events_bot.bot.keyboards import (
    get_main_keyboard,
    get_city_keyboard,
    get_category_selection_keyboard,
    get_skip_image_keyboard,
)
import logfire
from datetime import datetime
from events_bot.bot.keyboards.notification_keyboard import get_post_notification_keyboard
from events_bot.storage import file_storage

router = Router()

def register_post_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    dp.include_router(router)

@router.message(F.text == "‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def cmd_create_post(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", 
        reply_markup=get_city_keyboard(for_post=True)
    )
    await state.set_state(PostStates.waiting_for_city_selection)

@router.callback_query(F.data.startswith("post_city_"))
async def process_post_city_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
    city = callback.data[10:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "post_city_"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    data = await state.get_data()
    selected_cities = data.get("selected_cities", [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    if city in selected_cities:
        selected_cities.remove(city)
    else:
        selected_cities.append(city)
        
    await state.update_data(selected_cities=selected_cities)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=get_city_keyboard(for_post=True, selected_cities=selected_cities)
    )
    
    await callback.answer()

@router.callback_query(F.data == "post_city_select_all")
async def select_all_post_cities(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
    cities = [
        "–£—Ä–§–£", "–£–ì–ú–£", "–£—Ä–ì–≠–£", "–£—Ä–ì–ü–£",
        "–£—Ä–ì–Æ–£", "–£–ì–ì–£", "–£—Ä–ì–£–ü–°", "–£—Ä–ì–ê–•–£",
        "–£—Ä–ì–ê–£", "–†–ì–ü–ü–£", "–†–ê–ù–•–∏–ì–°"
    ]
    
    await state.update_data(selected_cities=cities)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=get_city_keyboard(for_post=True, selected_cities=cities)
    )
    
    await callback.answer()

@router.callback_query(F.data == "post_city_confirm")
async def confirm_post_cities(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    selected_cities = data.get("selected_cities", [])
    
    if not selected_cities:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥–æ—Ä–æ–¥!")
        return
    
    await state.update_data(selected_cities=selected_cities)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    from events_bot.database.services import CategoryService
    
    # –ü–æ–ª—É—á–∞–µ–º db –∏–∑ data
    db = callback.bot.get("db")
    if not db:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    categories = await CategoryService.get_all_categories(db)
    
    try:
        await callback.message.delete()
        await callback.message.answer(
            f"üìç –í—ã–±—Ä–∞–Ω—ã –≥–æ—Ä–æ–¥–∞: {', '.join(selected_cities)}\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=get_category_selection_keyboard(categories, for_post=True),
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    await state.set_state(PostStates.waiting_for_category_selection)
    await callback.answer()

@router.callback_query(F.data.startswith("post_category_"))
async def process_post_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞"""
    category_id = int(callback.data.split("_")[2])  # post_category_{id}
    
    # –ü–æ–ª—É—á–∞–µ–º db –∏–∑ callback.bot
    db = callback.bot.get("db")
    if not db:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    from events_bot.database.services import CategoryService
    categories = await CategoryService.get_all_categories(db)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    selected_ids = data.get("selected_categories", [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    if category_id in selected_ids:
        selected_ids.remove(category_id)
    else:
        selected_ids.append(category_id)
        
    await state.update_data(selected_categories=selected_ids)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=get_category_selection_keyboard(categories, selected_ids, for_post=True)
    )
    
    await callback.answer()

@router.callback_query(F.data == "post_confirm_categories")
async def confirm_post_categories(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ—Å—Ç–∞"""
    data = await state.get_data()
    selected_ids = data.get("selected_categories", [])
    
    if not selected_ids:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
        return
    
    await state.update_data(selected_categories=selected_ids)
    
    try:
        await callback.message.delete()
        await callback.message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    await state.set_state(PostStates.waiting_for_title)
    await callback.answer()

@router.message(PostStates.waiting_for_title)
async def process_post_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å—Ç–∞"""
    title = message.text.strip()
    
    if len(title) > 100:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(title=title)
    
    await message.answer(
        "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤):\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        "‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n"
        "‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i>\n"
        "‚Ä¢ <u>–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>\n"
        "‚Ä¢ <s>–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>",
        parse_mode="HTML"
    )
    
    await state.set_state(PostStates.waiting_for_content)

@router.message(PostStates.waiting_for_content)
async def process_post_content(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    content = message.text.strip()
    
    if len(content) > 2000:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(content=content)
    
    await message.answer(
        "üìé –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é?",
        reply_markup=get_skip_image_keyboard()
    )
    
    await state.set_state(PostStates.waiting_for_image)

@router.callback_query(F.data == "skip_image")
async def skip_image(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        await callback.message.delete()
        await callback.message.answer(
            "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    await state.set_state(PostStates.waiting_for_address)
    await callback.answer()

@router.message(PostStates.waiting_for_image)
async def process_post_image(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    await state.update_data(image_id=photo.file_id)
    
    await message.answer(
        "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"
    )
    
    await state.set_state(PostStates.waiting_for_address)

@router.message(PostStates.waiting_for_address)
async def process_post_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ—Å—Ç–∞"""
    address = message.text.strip()
    
    if address.lower() == "/skip":
        address = None
    elif len(address) > 500:
        await message.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(address=address)
    
    await message.answer(
        "üåê –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: https://example.com"
    )
    
    await state.set_state(PostStates.waiting_for_url)

@router.message(PostStates.waiting_for_url)
async def process_post_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –ø–æ—Å—Ç–∞"""
    url = message.text.strip()
    
    if url.lower() == "/skip":
        url = None
    elif not (url.startswith("http://") or url.startswith("https://")):
        await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https:// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    elif len(url) > 500:
        await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(url=url)
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:30"
    )
    
    await state.set_state(PostStates.waiting_for_event_datetime)

@router.message(PostStates.waiting_for_event_datetime)
async def process_post_event_datetime(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞"""
    event_at_str = message.text.strip()
    event_at = None
    
    if event_at_str.lower() != "/skip":
        try:
            event_at = datetime.strptime(event_at_str, "%d.%m.%Y %H:%M")
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:30\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
    post = await PostService.create_post(
        db=db,
        title=data["title"],
        content=data["content"],
        author_id=message.from_user.id,
        category_ids=data["selected_categories"],
        cities=data["selected_cities"],
        image_id=data.get("image_id"),
        event_at=event_at,
        url=data.get("url"),
        address=data.get("address"),
    )
    
    await message.answer(
        "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
        "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        reply_markup=get_main_keyboard()
    )
    
    await state.clear()

@router.callback_query(F.data == "cancel_post")
async def cancel_post_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await state.clear()
    
    try:
        await callback.message.delete()
        await callback.message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    
    await callback.answer()
