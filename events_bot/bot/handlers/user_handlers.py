from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from events_bot.database.services import UserService, CategoryService, PostService, LikeService
from events_bot.bot.states import UserStates
from events_bot.bot.keyboards import get_main_keyboard, get_category_selection_keyboard, get_city_keyboard
from events_bot.utils import get_clean_category_string

router = Router()


@router.callback_query(F.data.startswith("notify_heart_"))
async def handle_notify_heart(callback: CallbackQuery, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏"""
    try:
        post_id = int(callback.data.split("notify_heart_")[1])
        user_id = callback.from_user.id

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ª–∞–π–∫
        result = await LikeService.toggle_like(db, user_id, post_id)
        is_liked = result["action"] == "added"

        # –ü–æ–ª—É—á–∞–µ–º URL –ø–æ—Å—Ç–∞
        post = await PostService.get_post_by_id(db, post_id)
        post_url = getattr(post, "url", None)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from events_bot.bot.keyboards.notification_keyboard import get_post_notification_keyboard
        new_keyboard = get_post_notification_keyboard(
            post_id=post_id,
            is_liked=is_liked,
            url=post_url
        )
        await callback.message.edit_reply_markup(reply_markup=new_keyboard)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–æ" if is_liked else "—É–¥–∞–ª–µ–Ω–æ"
        await callback.answer(f"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ {action_text}", show_alert=True)

    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", show_alert=True)


def register_user_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dp.include_router(router)


@router.message(F.text.in_(["/menu", "/main_menu"]))
async def cmd_main_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


@router.message(F.text == "/my_posts")
async def cmd_my_posts(message: Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_posts"""
    posts = await PostService.get_user_posts(db, message.from_user.id)

    if not posts:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.", reply_markup=get_main_keyboard()
        )
        return

    response = "üìä –í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        await db.refresh(post, attribute_names=["categories"])
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if post.is_approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        category_str = get_clean_category_string(post.categories)
        post_city = getattr(post, "city", "–ù–µ —É–∫–∞–∑–∞–Ω")
        response += f"üìù {post.title}\n"
        response += f"üèôÔ∏è {post_city}\n"
        response += f"üìÇ {category_str}\n"
        response += f"üìÖ {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üìä {status}\n\n"

    await message.answer(response, reply_markup=get_main_keyboard())


@router.message(F.text == "/change_city")
async def cmd_change_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_city"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:", reply_markup=get_city_keyboard())
    await state.set_state(UserStates.waiting_for_city)


@router.message(F.text == "/change_category")
async def cmd_change_category(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_category"""
    categories = await CategoryService.get_all_categories(db)
    user_categories = await UserService.get_user_categories(db, message.from_user.id)
    selected_ids = [cat.id for cat in user_categories]

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
        reply_markup=get_category_selection_keyboard(categories, selected_ids),
    )
    await state.set_state(UserStates.waiting_for_categories)


@router.message(F.text == "/help")
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –°–µ—Ä–¥—Ü—É. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

üíå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /menu

üìÆ –°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–±–æ—Ä–∫—É - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ –≥–æ—Ä–æ–¥—É

‚ù§Ô∏è –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ - —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –°–µ—Ä–¥—Ü–µ

‚≠êÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏

üìç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ - —Å–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏
3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –ø–æ –≤–∞—à–µ–º—É –≥–æ—Ä–æ–¥—É –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º

–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:

‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @serdce_help
"""

    await message.answer(help_text, reply_markup=get_main_keyboard())


@router.callback_query(F.data.startswith("city_"))
async def process_city_selection_callback(
    callback: CallbackQuery, state: FSMContext, db
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    city = callback.data[5:]
    user = await UserService.register_user(
        db=db,
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )
    user.city = city
    await db.commit()
    categories = await CategoryService.get_all_categories(db)
    try:
        await callback.message.delete()
        await callback.message.answer(
            f"üìç –ì–æ—Ä–æ–¥ {city} –≤—ã–±—Ä–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
            reply_markup=get_category_selection_keyboard(categories),
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await state.set_state(UserStates.waiting_for_categories)
    await callback.answer()


@router.callback_query(F.data == "change_city")
async def change_city_callback(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    try:
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:", reply_markup=get_city_keyboard()
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await state.set_state(UserStates.waiting_for_city)
    await callback.answer()


@router.callback_query(F.data == "change_category")
async def change_category_callback(callback: CallbackQuery, state: FSMContext, db):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    categories = await CategoryService.get_all_categories(db)
    user_categories = await UserService.get_user_categories(db, callback.from_user.id)
    selected_ids = [cat.id for cat in user_categories]

    try:
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
            reply_markup=get_category_selection_keyboard(categories, selected_ids),
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await state.set_state(UserStates.waiting_for_categories)
    await callback.answer()


@router.callback_query(F.data == "my_posts")
async def show_my_posts_callback(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    posts = await PostService.get_user_posts(db, callback.from_user.id)

    if not posts:
        try:
            await callback.message.delete()
            await callback.message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.", reply_markup=get_main_keyboard()
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        return

    response = "üìä –í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        await db.refresh(post, attribute_names=["categories"])
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if post.is_approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        category_str = get_clean_category_string(post.categories)
        post_city = getattr(post, "city", "–ù–µ —É–∫–∞–∑–∞–Ω")
        response += f"üìù {post.title}\n"
        response += f"üèôÔ∏è {post_city}\n"
        response += f"üìÇ {category_str}\n"
        response += f"üìÖ {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üìä {status}\n\n"

    try:
        await callback.message.delete()
        await callback.message.answer(response, reply_markup=get_main_keyboard())
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(F.data == "help")
async def show_help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    help_text = """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –°–µ—Ä–¥—Ü—É. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

üíå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /menu

üìÆ –°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–±–æ—Ä–∫—É - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ –≥–æ—Ä–æ–¥—É

‚ù§Ô∏è –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ - —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –°–µ—Ä–¥—Ü–µ

‚≠êÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏

üìç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ - —Å–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏
3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –ø–æ –≤–∞—à–µ–º—É –≥–æ—Ä–æ–¥—É –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º

–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:

‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @serdce_help
"""

    try:
        await callback.message.delete()
        await callback.message.answer(help_text, reply_markup=get_main_keyboard())
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def show_main_menu_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()
