from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from events_bot.database.services import UserService, CategoryService, PostService, LikeService
from events_bot.bot.states import UserStates
from events_bot.bot.keyboards import get_main_keyboard, get_category_selection_keyboard, get_city_keyboard
from events_bot.utils import get_clean_category_string
from events_bot.bot.keyboards.notification_keyboard import get_post_notification_keyboard
from events_bot.bot.handlers.feed_handlers import show_liked_page_from_animation, format_liked_list
from events_bot.bot.keyboards.feed_keyboard import get_liked_list_keyboard
from events_bot.bot.handlers.start_handler import show_main_menu, MAIN_MENU_GIF_IDS  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–∏—Ñ–∫–∏
import logfire
import os
import random  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º random

# –ì–∏—Ñ–∫–∏
LIKED_GIF_ID = os.getenv("LIKED_GIF_ID")

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
POSTS_PER_PAGE = 5  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å

router = Router()


@router.callback_query(F.data.startswith("notify_heart_"))
async def handle_notify_heart(callback: CallbackQuery, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏"""
    try:
        post_id = int(callback.data.split("notify_heart_")[1])
        user_id = callback.from_user.id

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ª–∞–π–∫
        result = await LikeService.toggle_like(db, user_id, post_id)
        is_liked = result["action"] == "added"

        # –ü–æ–ª—É—á–∞–µ–º URL –ø–æ—Å—Ç–∞
        post = await PostService.get_post_by_id(db, post_id)
        post_url = getattr(post, "url", None)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        new_keyboard = get_post_notification_keyboard(
            post_id=post_id,
            is_liked=is_liked,
            url=post_url
        )
        await callback.message.edit_reply_markup(reply_markup=new_keyboard)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–æ" if is_liked else "—É–¥–∞–ª–µ–Ω–æ"
        await callback.answer(f"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ {action_text}", show_alert=True)

    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", show_alert=True)


@router.message(F.text == "/delete_user")
async def cmd_delete_user(message: Message, db):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ—Ö –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = message.from_user.id
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await UserService.register_user(
        db=db,
        telegram_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    if not user:
        await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await UserService.delete_user(db, user_id)
    if success:
        await message.answer(
            "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å—Ç—ã, –ª–∞–π–∫–∏) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n\n"
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "/liked_posts")
async def cmd_liked_posts(message: Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /liked_posts ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    logfire.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    try:
        await message.delete()
    except Exception:
        pass

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∏—Ñ–∫—É "–∑–∞–≥—Ä—É–∑–∫–∞"
    if LIKED_GIF_ID:
        try:
            sent = await message.answer_animation(
                animation=LIKED_GIF_ID,
                caption="‚ù§Ô∏è –ó–∞–≥—Ä—É–∂–∞—é –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...",
                parse_mode="HTML"
            )
            await show_liked_page_from_animation(sent, 0, db, user_id=message.from_user.id)
            return
        except Exception as e:
            logfire.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∏—Ñ–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")

    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –±–µ–∑ –≥–∏—Ñ–∫–∏
    await show_liked_page_cmd(message, 0, db, user_id=message.from_user.id)


async def show_liked_page_cmd(message: Message, page: int, db, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (—á–µ—Ä–µ–∑ Message)"""
    posts = await PostService.get_liked_posts(db, user_id, POSTS_PER_PAGE, page * POSTS_PER_PAGE)
    if not posts:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å:\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ –ø–æ–¥–±–æ—Ä–∫–µ\n"
            "‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–æ–±—ã—Ç–∏—è\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ¬ª –ø–æ–¥ –ø–æ—Å—Ç–æ–º",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        return

    total_posts = await PostService.get_liked_posts_count(db, user_id)
    total_pages = (total_posts + POSTS_PER_PAGE - 1) // POSTS_PER_PAGE
    start_index = page * POSTS_PER_PAGE + 1
    text = format_liked_list(posts, start_index, total_posts)

    await message.answer(
        text,
        reply_markup=get_liked_list_keyboard(posts, page, total_pages, start_index=start_index),
        parse_mode="HTML"
    )


@router.callback_query(UserStates.waiting_for_categories, F.data == "confirm_categories")
async def confirm_categories(callback: CallbackQuery, state: FSMContext, db):
    data = await state.get_data()
    selected_ids = data.get("selected_categories", [])

    if not selected_ids:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await UserService.select_categories(db, callback.from_user.id, selected_ids)

    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()

        # ‚úÖ –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É –∫–∞–∫ photo
        if MAIN_MENU_GIF_IDS:
            selected_gif = random.choice(MAIN_MENU_GIF_IDS)
            sent = await callback.bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=selected_gif,
                caption="",  # –ü—É—Å—Ç–æ–π caption
                reply_markup=None  # –ë–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            )
            # ‚úÖ –®–∞–≥ 2: –ß–µ—Ä–µ–∑ 0.5 —Å–µ–∫ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await asyncio.sleep(0.5)
            await sent.edit_reply_markup(reply_markup=get_main_keyboard())
        else:
            # –†–µ–∑–µ—Ä–≤: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_keyboard(),
                input_field_placeholder=""
            )
    except Exception as e:
        logfire.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–∏—Ñ–∫–∏: {e}")
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard(),
            input_field_placeholder=""
        )

    await state.clear()
    await callback.answer()


def register_user_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dp.include_router(router)


@router.message(F.text == "/my_posts")
async def cmd_my_posts(message: Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_posts"""
    posts = await PostService.get_user_posts(db, message.from_user.id)

    if not posts:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.", reply_markup=get_main_keyboard()
        )
        return

    response = "üìä –í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        await db.refresh(post, attribute_names=["categories"])
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if post.is_approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        category_str = get_clean_category_string(post.categories)
        post_city = getattr(post, "city", "–ù–µ —É–∫–∞–∑–∞–Ω")
        response += f"üìù {post.title}\n"
        response += f"üèôÔ∏è {post_city}\n"
        response += f"üìÇ {category_str}\n"
        response += f"üìÖ {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üìä {status}\n\n"

    await message.answer(response, reply_markup=get_main_keyboard())


@router.message(F.text == "/change_university")
async def cmd_change_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_university"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:", reply_markup=get_city_keyboard())
    await state.set_state(UserStates.waiting_for_city)


@router.message(F.text == "/change_category")
async def cmd_change_category(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_category"""
    categories = await CategoryService.get_all_categories(db)
    user_categories = await UserService.get_user_categories(db, message.from_user.id)
    selected_ids = [cat.id for cat in user_categories]

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
        reply_markup=get_category_selection_keyboard(categories, selected_ids),
    )
    await state.set_state(UserStates.waiting_for_categories)


@router.message(F.text == "/help")
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –°–µ—Ä–¥—Ü—É. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

üíå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /menu

üìÆ –°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–±–æ—Ä–∫—É - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ –≥–æ—Ä–æ–¥—É

‚ù§Ô∏è –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ - —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –°–µ—Ä–¥—Ü–µ

‚≠êÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏

üìç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ - —Å–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏
3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –ø–æ –≤–∞—à–µ–º—É –≥–æ—Ä–æ–¥—É –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º

–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:

‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @serdce_help
"""

    await message.answer(help_text, reply_markup=get_main_keyboard())


@router.callback_query(F.data.startswith("city_"))
async def process_city_selection_callback(callback: CallbackQuery, state: FSMContext, db):
    city = callback.data[5:]
    user = await UserService.register_user(
        db=db,
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )
    user.city = city
    await db.commit()

    categories = await CategoryService.get_all_categories(db)

    try:
        # ‚úÖ –†–ï–î–ê–ö–¢–ò–†–£–ï–ú, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=f"üìç –ì–æ—Ä–æ–¥ {city} –≤—ã–±—Ä–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:",
            reply_markup=get_category_selection_keyboard(categories),
            parse_mode="HTML"
        )
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    await state.set_state(UserStates.waiting_for_categories)
    await callback.answer()


@router.callback_query(F.data == "change_city")
async def change_city_callback(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
            reply_markup=get_city_keyboard()
        )
    except Exception as e:
        logfire.error(f"–û—à–∏–±–∫–∞: {e}")
    await state.set_state(UserStates.waiting_for_city)
    await callback.answer()


@router.callback_query(F.data == "change_category")
async def change_category_callback(callback: CallbackQuery, state: FSMContext, db):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    categories = await CategoryService.get_all_categories(db)
    user_categories = await UserService.get_user_categories(db, callback.from_user.id)
    selected_ids = [cat.id for cat in user_categories]

    try:
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
            reply_markup=get_category_selection_keyboard(categories, selected_ids),
        )
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await state.set_state(UserStates.waiting_for_categories)
    await callback.answer()


@router.callback_query(F.data == "my_posts")
async def show_my_posts_callback(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    posts = await PostService.get_user_posts(db, callback.from_user.id)

    if not posts:
        try:
            await callback.message.delete()
            await callback.message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.", reply_markup=get_main_keyboard()
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                raise
        return

    response = "üìä –í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        await db.refresh(post, attribute_names=["categories"])
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if post.is_approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        category_str = get_clean_category_string(post.categories)
        post_city = getattr(post, "city", "–ù–µ —É–∫–∞–∑–∞–Ω")
        response += f"üìù {post.title}\n"
        response += f"üèôÔ∏è {post_city}\n"
        response += f"üìÇ {category_str}\n"
        response += f"üìÖ {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üìä {status}\n\n"

    try:
        await callback.message.delete()
        await callback.message.answer(response, reply_markup=get_main_keyboard())
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()


@router.callback_query(F.data == "help")
async def show_help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    help_text = """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –°–µ—Ä–¥—Ü—É. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

üíå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /menu

üìÆ –°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–±–æ—Ä–∫—É - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ –≥–æ—Ä–æ–¥—É

‚ù§Ô∏è –ú–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ - —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –°–µ—Ä–¥—Ü–µ

‚≠êÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏

üìç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ - —Å–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏
3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –ø–æ –≤–∞—à–µ–º—É –≥–æ—Ä–æ–¥—É –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º

–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:

‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π

–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @serdce_help
"""

    try:
        await callback.message.delete()
        await callback.message.answer(help_text, reply_markup=get_main_keyboard())
    except Exception as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()
