from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from events_bot.database.services import UserService, CategoryService, PostService, LikeService, CityService
from events_bot.bot.states import UserStates
from events_bot.bot.keyboards import get_main_keyboard, get_category_selection_keyboard, get_city_keyboard
from events_bot.utils import get_clean_category_string
from events_bot.bot.keyboards.notification_keyboard import get_post_notification_keyboard
from events_bot.bot.handlers.feed_handlers import show_liked_page_from_animation, format_liked_list
from events_bot.bot.keyboards.feed_keyboard import get_liked_list_keyboard
import logfire
import os

LIKED_GIF_ID = os.getenv("LIKED_GIF_ID")
POSTS_PER_PAGE = 5
router = Router()


def register_user_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dp.include_router(router)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/—Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞ ---

@router.callback_query(UserStates.waiting_for_city, F.data.startswith("city_"))
async def process_city_selection(callback: CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)"""
    city_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    selected_ids = data.get("selected_cities", [])

    if city_id in selected_ids:
        selected_ids.remove(city_id)
    else:
        selected_ids.append(city_id)
    await state.update_data(selected_cities=selected_ids)

    all_cities = await CityService.get_all_cities(db)
    await callback.message.edit_reply_markup(
        reply_markup=get_city_keyboard(all_cities, selected_ids)
    )
    await callback.answer()


@router.callback_query(UserStates.waiting_for_city, F.data == "user_city_select_all")
async def process_select_all_cities(callback: CallbackQuery, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ' –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤"""
    all_cities = await CityService.get_all_cities(db)
    all_city_ids = [c.id for c in all_cities]

    data = await state.get_data()
    selected_ids = data.get("selected_cities", [])

    if len(selected_ids) == len(all_city_ids):
        new_selection = []
        await callback.answer("üóô –í—Å–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã —Å–Ω—è—Ç—ã")
    else:
        new_selection = all_city_ids
        await callback.answer("‚úÖ –í—Å–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã!")

    await state.update_data(selected_cities=new_selection)
    await callback.message.edit_reply_markup(
        reply_markup=get_city_keyboard(all_cities, new_selection)
    )


@router.callback_query(UserStates.waiting_for_city, F.data == "confirm_cities")
async def confirm_city_selection(callback: CallbackQuery, state: FSMContext, db):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤"""
    data = await state.get_data()
    selected_ids = data.get("selected_cities", [])
    if not selected_ids:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç!", show_alert=True)
        return

    await UserService.select_cities(db, callback.from_user.id, selected_ids)
    
    selected_cities = await CityService.get_cities_by_ids(db, selected_ids)
    city_names = ", ".join([c.name for c in selected_cities])
    
    await state.update_data(selected_cities=[]) # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    categories = await CategoryService.get_all_categories(db)
    user_categories = await UserService.get_user_categories(db, callback.from_user.id)
    selected_cat_ids = [cat.id for cat in user_categories]

    await callback.message.edit_text(
        f"üìç –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –≤—ã–±—Ä–∞–Ω—ã: {city_names}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
        reply_markup=get_category_selection_keyboard(categories, selected_cat_ids),
    )
    await state.set_state(UserStates.waiting_for_categories)
    await callback.answer()


@router.callback_query(F.data == "change_city")
async def change_city_callback(callback: CallbackQuery, state: FSMContext, db):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    all_cities = await CityService.get_all_cities(db)
    user_cities = await UserService.get_user_cities(db, callback.from_user.id)
    selected_ids = [c.id for c in user_cities]
    
    await state.update_data(selected_cities=selected_ids) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    try:
        await callback.message.delete()
    except Exception:
        pass
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
        reply_markup=get_city_keyboard(all_cities, selected_ids)
    )
    await state.set_state(UserStates.waiting_for_city)
    await callback.answer()

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.callback_query(F.data.startswith("notify_heart_"))
async def handle_notify_heart(callback: CallbackQuery, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏"""
    try:
        post_id = int(callback.data.split("notify_heart_")[1])
        user_id = callback.from_user.id

        result = await LikeService.toggle_like(db, user_id, post_id)
        is_liked = result["action"] == "added"
        post = await PostService.get_post_by_id(db, post_id)
        post_url = getattr(post, "url", None)

        new_keyboard = get_post_notification_keyboard(
            post_id=post_id, is_liked=is_liked, url=post_url
        )
        await callback.message.edit_reply_markup(reply_markup=new_keyboard)
        action_text = "–¥–æ–±–∞–≤–ª–µ–Ω–æ" if is_liked else "—É–¥–∞–ª–µ–Ω–æ"
        await callback.answer(f"–ò–∑–±—Ä–∞–Ω–Ω–æ–µ {action_text}", show_alert=True)
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", show_alert=True)


@router.message(F.text == "/my_posts")
async def cmd_my_posts(message: Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_posts"""
    posts = await PostService.get_user_posts(db, message.from_user.id)

    if not posts:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.", reply_markup=get_main_keyboard())
        return

    response = "üìä –í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        await db.refresh(post, attribute_names=["categories", "cities"])
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if post.is_approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        category_str = get_clean_category_string(post.categories)
        city_names = ", ".join([c.name for c in post.cities])
        response += f"üìù {post.title}\n"
        response += f"üèôÔ∏è {city_names}\n"
        response += f"üìÇ {category_str}\n"
        response += f"üìÖ {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üìä {status}\n\n"

    await message.answer(response, reply_markup=get_main_keyboard())


@router.message(F.text == "/change_university")
async def cmd_change_city(message: Message, state: FSMContext, db):
    all_cities = await CityService.get_all_cities(db)
    user_cities = await UserService.get_user_cities(db, message.from_user.id)
    selected_ids = [c.id for c in user_cities]
    
    await state.update_data(selected_cities=selected_ids)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
        reply_markup=get_city_keyboard(all_cities, selected_ids)
    )
    await state.set_state(UserStates.waiting_for_city)


@router.message(F.text == "/change_category")
async def cmd_change_category(message: Message, state: FSMContext, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /change_category"""
    categories = await CategoryService.get_all_categories(db)
    user_categories = await UserService.get_user_categories(db, message.from_user.id)
    selected_ids = [cat.id for cat in user_categories]

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
        reply_markup=get_category_selection_keyboard(categories, selected_ids),
    )
    await state.set_state(UserStates.waiting_for_categories)


@router.callback_query(F.data == "change_category")
async def change_category_callback(callback: CallbackQuery, state: FSMContext, db):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    categories = await CategoryService.get_all_categories(db)
    user_categories = await UserService.get_user_categories(db, callback.from_user.id)
    selected_ids = [cat.id for cat in user_categories]

    try:
        await callback.message.delete()
    except Exception:
        pass
        
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∫–∏:",
        reply_markup=get_category_selection_keyboard(categories, selected_ids),
    )
    await state.set_state(UserStates.waiting_for_categories)
    await callback.answer()


@router.callback_query(F.data == "my_posts")
async def show_my_posts_callback(callback: CallbackQuery, db):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    posts = await PostService.get_user_posts(db, callback.from_user.id)

    try:
        await callback.message.delete()
    except Exception:
        pass

    if not posts:
        await callback.message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.", reply_markup=get_main_keyboard())
        return

    response = "üìä –í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"
    for post in posts:
        await db.refresh(post, attribute_names=["categories", "cities"])
        status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if post.is_approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        category_str = get_clean_category_string(post.categories)
        city_names = ", ".join([c.name for c in post.cities])
        response += f"üìù {post.title}\n"
        response += f"üèôÔ∏è {city_names}\n"
        response += f"üìÇ {category_str}\n"
        response += f"üìÖ {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üìä {status}\n\n"
    
    await callback.message.answer(response, reply_markup=get_main_keyboard())
    await callback.answer()
