from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from typing import List
from events_bot.database.models import Category
from aiogram.utils.keyboard import InlineKeyboardBuilder


def get_category_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    keyboard = [
        [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_category_selection_keyboard(
    categories: List[Category], selected_ids: List[int] = None, for_post: bool = False
) -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if selected_ids is None:
        selected_ids = []

    builder = InlineKeyboardBuilder()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    prefix = "post_category_" if for_post else "category_"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
    from events_bot.utils import visual_len

    MAX_NAME_LENGTH = 18  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è

    for category in categories:
        is_selected = category.id in selected_ids
        checkbox = "‚≠ê" if is_selected else "‚¨ú"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º display_name –¥–ª—è UI (—Å —ç–º–æ–¥–∑–∏), fallback –Ω–∞ name
        display_name = getattr(category, "display_name", None) or category.name
        
        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if visual_len(display_name) > MAX_NAME_LENGTH:
            # –û–±—Ä–µ–∑–∞–µ–º —Å —É—á–µ—Ç–æ–º —ç–º–æ–¥–∑–∏
            import re
            
            clean_length = 0
            result = ""
            for char in display_name:
                if re.match(r'[\U0001F000-\U0001F9FF\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF\u2600-\u26FF\u2700-\u27BF]', char):
                    # –≠–º–æ–¥–∑–∏ –Ω–µ —Å—á–∏—Ç–∞–µ–º –≤ –¥–ª–∏–Ω—É
                    result += char
                else:
                    if clean_length < MAX_NAME_LENGTH - 1:
                        result += char
                        clean_length += 1
                    else:
                        result += "‚Ä¶"
                        break
            display_name = result

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        name_visual_len = visual_len(display_name)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è (18 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è + 2 –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞)
        spaces_needed = max(1, 20 - name_visual_len)
        padding = " " * spaces_needed
        
        text = f"{display_name}{padding}{checkbox}"
        builder.button(text=text, callback_data=f"{prefix}{category.id}")
    builder.adjust(2)

    confirm_callback = "confirm_post_categories" if for_post else "confirm_categories"

    buttons = [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_callback)]

    if for_post:
        buttons.append(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_post")
        )

    builder.row(*buttons)
    return builder.as_markup()
