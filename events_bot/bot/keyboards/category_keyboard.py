from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from typing import List
from events_bot.database.models import Category
from aiogram.utils.keyboard import InlineKeyboardBuilder


def get_category_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    keyboard = [
        [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_category_selection_keyboard(
    categories: List[Category], selected_ids: List[int] = None, for_post: bool = False
) -> InlineKeyboardMarkup:
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if selected_ids is None:
        selected_ids = []

    builder = InlineKeyboardBuilder()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
    prefix = "post_category_" if for_post else "category_"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏
    from events_bot.utils import visual_len

    BUTTON_WIDTH = 18  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏

    for category in categories:
        is_selected = category.id in selected_ids
        checkbox = "‚≠êÔ∏è" if is_selected else "‚¨ú"

        name = category.name
        name_len = visual_len(name)  # –í–∏–∑—É–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –±–µ–∑ —É—á–µ—Ç–∞ —ç–º–æ–¥–∑–∏

        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
        if name_len > BUTTON_WIDTH - 3:
            # –ù—É–∂–Ω–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å —Å —É—á–µ—Ç–æ–º —ç–º–æ–¥–∑–∏
            import re

            # –†–∞–∑–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç
            parts = re.split(
                r"([\U0001F000-\U0001F9FF\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF\u2600-\u26FF\u2700-\u27BF]+)",
                name,
            )

            new_name = ""
            current_len = 0
            for part in parts:
                part_len = (
                    len(part)
                    if re.match(
                        r"[\U0001F000-\U0001F9FF\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F1E0-\U0001F1FF\u2600-\u26FF\u2700-\u27BF]+",
                        part,
                    )
                    else len(part)
                )
                if current_len + part_len <= BUTTON_WIDTH - 4:  # -4 –¥–ª—è "‚Ä¶" –∏ —á–µ–∫–±–æ–∫—Å–∞
                    new_name += part
                    current_len += part_len
                else:
                    if current_len < BUTTON_WIDTH - 4:
                        remaining = BUTTON_WIDTH - 4 - current_len
                        new_name += part[:remaining] + "‚Ä¶"
                    break
            name = new_name
            name_len = visual_len(name)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ —Å–ø—Ä–∞–≤–∞
        dots_count = BUTTON_WIDTH - name_len - 2  # -2 –¥–ª—è –ø—Ä–æ–±–µ–ª–∞ –∏ —á–µ–∫–±–æ–∫—Å–∞
        dots = "¬∑" * max(0, dots_count)

        text = f"{name} {dots}{checkbox}"
        builder.button(text=text, callback_data=f"{prefix}{category.id}")
    builder.adjust(2)

    confirm_callback = "confirm_post_categories" if for_post else "confirm_categories"

    buttons = [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_callback)]

    if for_post:
        buttons.append(
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_post")
        )

    builder.row(*buttons)
    return builder.as_markup()
