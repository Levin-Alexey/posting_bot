from sqlalchemy.ext.asyncio import AsyncSession
from typing import List
from ..repositories import PostRepository, ModerationRepository
from ..models import Post, ModerationAction
from ...utils import get_clean_category_string


class ModerationService:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π"""

    @staticmethod
    async def get_moderation_queue(db: AsyncSession) -> List[Post]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return await PostRepository.get_pending_moderation(db)

    @staticmethod
    async def get_moderation_history(db: AsyncSession, post_id: int) -> List:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
        return await ModerationRepository.get_moderation_history(db, post_id)

    @staticmethod
    async def get_actions_by_type(db: AsyncSession, action: ModerationAction) -> List:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏—è"""
        return await ModerationRepository.get_actions_by_type(db, action)

    @staticmethod
    def format_post_for_moderation(post: Post) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        category_str = get_clean_category_string(
            post.categories if hasattr(post, "categories") else None
        )

        author_name = "–ê–Ω–æ–Ω–∏–º"
        if hasattr(post, "author") and post.author is not None:
            author = post.author
            author_name = (
                getattr(author, "first_name", None)
                or getattr(author, "username", None)
                or "–ê–Ω–æ–Ω–∏–º"
            )

        post_city = getattr(post, "city", "–ù–µ —É–∫–∞–∑–∞–Ω")
        address = getattr(post, "address", "–ù–µ —É–∫–∞–∑–∞–Ω")
        url = getattr(post, "url", None)

        event_at = getattr(post, "event_at", None)
        event_str = event_at.strftime("%d.%m.%Y %H:%M") if event_at else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        created_at = getattr(post, "created_at", None)
        created_str = created_at.strftime("%d.%m.%Y %H:%M") if created_at else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        lines = [
            f"<b>–ü–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é</b>",
            "",
            f"<b>{post.title}</b>",
            f"<i>‚≠êÔ∏è {category_str}</i>",
            f"<i>üóì {event_str}</i>",
            "",
            f"üìç <b>–ì–æ—Ä–æ–¥:</b> {post_city}",
            f"üìå <b>–ê–¥—Ä–µ—Å:</b> {address}",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if url:
            lines.append(f"üîó {url}")

        lines.extend([
            "",
            f"<i>{post.content}</i>",
        ])

        return "\n".join(lines)

    @staticmethod
    def get_action_display_name(action: ModerationAction) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–µ–π—Å—Ç–≤–∏—è"""
        action_names = {
            ModerationAction.APPROVE: "–û–¥–æ–±—Ä–µ–Ω–æ",
            ModerationAction.REJECT: "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
            ModerationAction.REQUEST_CHANGES: "–¢—Ä–µ–±—É—é—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        }
        return action_names.get(action, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
