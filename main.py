#!/usr/bin/env python3
"""
Telegram Events Bot - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import logfire

# –ù–µ —Ç—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Logfire, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞
try:
    logfire.configure(scrubbing=False, send_to_logfire=False)
except Exception:
    pass

import asyncio
import os
from contextlib import asynccontextmanager
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from events_bot.database import init_database
from events_bot.bot.handlers import (
    register_start_handlers,
    register_user_handlers,
    register_post_handlers,
    register_callback_handlers,
    register_moderation_handlers,
    register_feed_handlers,
)
from events_bot.bot.middleware import DatabaseMiddleware
from events_bot.database.services.post_service import PostService
from loguru import logger

logger.configure(handlers=[logfire.loguru_handler()])

logfire.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    # –ü–æ–¥—Ö–≤–∞—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        from dotenv import load_dotenv

        load_dotenv()
    except Exception:
        pass

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("BOT_TOKEN")
    if not token:
        logfire.error("‚ùå Error: BOT_TOKEN not set")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_database()
    logfire.info("‚úÖ Database initialized")

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=token)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    dp.message.middleware(DatabaseMiddleware())
    dp.callback_query.middleware(DatabaseMiddleware())

    # === –ì–õ–û–ë–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• CALLBACK_QUERY ===
    async def log_all_callbacks(handler, event: types.CallbackQuery, data):
        logfire.info(
            f"üì• CALLBACK_QUERY: "
            f"data='{event.data}' | "
            f"user={event.from_user.id} | "
            f"chat={event.message.chat.id} | "
            f"message_id={event.message.message_id}"
        )
        return await handler(event, data)

    dp.callback_query.outer_middleware(log_all_callbacks)
    # ================================================

    # === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• CALLBACK_QUERY ===
    @dp.callback_query()
    async def catch_all_callbacks(callback: types.CallbackQuery):
        logfire.warning(f"üö® –ü–û–ô–ú–ê–ù callback: data='{callback.data}' –æ—Ç @{callback.from_user.username} ({callback.from_user.id})")
        try:
            await callback.answer()
        except Exception as e:
            logfire.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ answer –Ω–∞ callback: {e}")
    # ================================================

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_start_handlers(dp)
    register_user_handlers(dp)
    register_post_handlers(dp)
    register_callback_handlers(dp)
    register_moderation_handlers(dp)
    register_feed_handlers(dp)

    logfire.info("ü§ñ Bot started...")

    async def cleanup_expired_posts_task():
        from events_bot.bot.utils import get_db_session
        from events_bot.storage import file_storage

        while True:
            try:
                async with get_db_session() as db:
                    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö (id, image_id)
                    expired = await PostService.get_expired_posts_info(db)
                    deleted = await PostService.delete_expired_posts(db)
                    if deleted:
                        logfire.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {deleted}")
                        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                        for row in expired:
                            image_id = row.get("image_id")
                            if image_id:
                                try:
                                    await file_storage.delete_file(image_id)
                                except Exception:
                                    pass
            except Exception as e:
                logfire.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            await asyncio.sleep(60 * 10)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        await asyncio.gather(
            dp.start_polling(bot),
            cleanup_expired_posts_task(),
        )
    except KeyboardInterrupt:
        logfire.info("üõë Bot stopped")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
